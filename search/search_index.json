{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>Welcome to the documentation site of the [https://littil.org] platform.</p>"},{"location":"#how-to-contribute","title":"How to contribute","text":"<ul> <li>If you encounter bugs you can report them on our GitHub repository (extra points for a Pull Request)</li> <li>We communicate on Slack channel nl_littil_dev</li> <li>We manage our backlog on  Atlassian Jira</li> <li>This documentation site supports Markdown and PlantUML and can be updated via GitHub</li> </ul>"},{"location":"help/","title":"Homepage","text":"<p>This is the root of the documentation site of the Littil platform. It supports Markdown and PlantUML. </p> <p>For example: </p> <pre><code>@startuml\n  Goofy -&gt;  MickeyMouse: calls\n  Goofy &lt;-- MickeyMouse: responds\n@enduml\n</code></pre> <p>Will generate:</p> <p> </p> <p>You can also include files using:</p> Dockerfile<pre><code>FROM squidfunk/mkdocs-material\n\nRUN  pip install --no-cache-dir \\\n     mkdocs-build-plantuml-plugin \\\n     mkdocs-exclude \\\n     mkdocs-include-markdown-plugin \\\n     mkdocs-git-snippet \\\n     mkdocs-git-revision-date-localized-plugin \\\n     mkdocs-git-authors-plugin\n\nRUN apk update &amp;&amp; apk upgrade &amp;&amp; \\\n    apk add --no-cache gcc musl-dev openjdk11-jdk curl fontconfig ttf-dejavu\n\nRUN mkdir /graphviz &amp;&amp; \\\n  apk add --update graphviz\n\nRUN curl -o plantuml.jar -L http://sourceforge.net/projects/plantuml/files/plantuml.1.2022.5.jar/download &amp;&amp; echo \"47c95b77e13cd9667ddfc8dc1188ceefac01a109  plantuml.jar\" | sha1sum -c - &amp;&amp; mv plantuml.jar /opt/plantuml.jar\nRUN echo $'#!/bin/sh\\n\\njava -jar '/opt/plantuml.jar' ${@}' &gt;&gt; /usr/local/bin/plantuml\nRUN [\"chmod\", \"+x\", \"/usr/local/bin/plantuml\"]\n\nCMD [\"serve\", \"--dev-addr=0.0.0.0:8000\"]\n</code></pre> <p>Or even include files from a git repository: Feature file fetched from a repository<pre><code>Feature: Management of the teacher profile\n  This feature contains registration, updating and deletion of a user account for teachers, including all profile data\n\n  Scenario: A new user registers on the platform with only mandatory data\n    Given user Iris is new to the platform\n    When Iris indicates she wants to register as a teacher\n    Then she is presented with a registration form\n    When she gives her first name as Iris\n    And her surname as de Bruin\n    And her email as iris.de.bruin@outlook.com\n    And her password as superSecret\n    And her country as the Netherlands\n    And indicates that she agrees with the privacy statement\n    And she confirms the registration\n    Then she receives an email at iris.de.bruin@outlook.com asking to activate her account\n    When she follows the activation instructions in the email\n    Then her account is activated\n    And she can log in with email iris.de.bruin@outlook.com and password superSecret\n\n  Scenario: A new user registers on the platform, completing her full profile\n    Given user Jeffrey is new to the platform\n    When Jeffrey indicates he wants to register as a teacher\n    Then he is presented with a registration form\n    When he gives his first name as Jeffrey\n    And his surname as Wang\n    And his email as jeffrey.wang@outlook.com\n    And his password as superSecret\n    And his post code as 3081\n    And his country as the Netherlands\n    And his available days as Monday,Wednesday,Friday\n    And his profile text as Liefst alleen groep acht.\n    And indicates that he agrees with the privacy statement\n    And he confirms the registration\n    Then he receives an email at jeffrey.wang@outlook.com asking to activate his account\n    When he follows the activation instructions in the email\n    Then his account is activated\n</code></pre></p>"},{"location":"about/","title":"About our foundation","text":"<p>The LITTIL project is an initiative to develop and maintain an Open-Source platform to connect schools with volunteer teachers for programming workshops. It was born to facilitate the central aim of the Devoxx4Kids foundation, which is to acquaint children with programming through fun workshops at their school.</p> <p>The platform provides a web-based portal for schools and volunteer teachers to register themselves and create a public profile. The platform then facilitates both parties to find possible matches. </p>"},{"location":"about/contribute/","title":"Backlog","text":"<p>Our backlog is managed on our Atlassian Jira</p>"},{"location":"about/contribute/#communication","title":"Communication","text":"<p>Slack channel nl_littil_dev</p>"},{"location":"about/contribute/#trunk-main-based-development","title":"Trunk 'Main' based development","text":"<p>Trunk based development is just about the easiest git based workflow there is. Just build and test a feature and commit/push it to the Main branch.</p> <ul> <li>Try to prevent long-lived feature branches.</li> <li>Every developer can push into the main branch.</li> <li>Run tests before you push.</li> <li>When you commit use the trello story name in the commit message</li> <li>What gets pushed can be released, so be aware of this.</li> <li>Of course, you can create a feature branch if you prefer. For example to create a PR for a review.</li> </ul> <p>Read more about the pros and cons:</p> <p>devops-tech-trunk-based-development</p>"},{"location":"platform/architecture/","title":"Littil architecture","text":"<ul> <li>Conceptual and data model</li> <li>Authentication and role-based authorization</li> </ul>"},{"location":"platform/architecture/model/","title":"Conceptual and data model","text":"<p>The Littil project aims to bring together schools and prospective teachers. To that purpose both parties will be known to the platform with a certain minimum number of properties, i.e. a profile.</p> <p>Consider the basic scenario of a school looking for a list of suitable and available teachers.</p>"},{"location":"platform/architecture/model/#the-teacher-profile","title":"The teacher profile","text":"<p>We can identify the following minimum properties * unique identifier, generated by the platform. Preferably a UUID, not a DB sequence number. * First name * Surname * Email (must be unique) * Postal code, at minimum the digits, not the letters. This is all that is needed for a geographical match. * Country. At present littil is only active in the Netherlands, but this can change. * Date of last login/activity. Maintained by the platform, not part of the profile. * Preferences: for the time being this will be free text. Possibly later you can choose from a set of modules.  * Availability: which days of the week are you in principle available?  </p>"},{"location":"platform/architecture/model/#the-school-profile","title":"The school profile","text":"<ul> <li>unique identifier, generated by the platform</li> <li>Name of the school</li> <li>Address of the school. Full address is optional. Postal code is mandatory.</li> <li>Name of contact person</li> <li>Email of contact person</li> <li>Date of last login/activity.</li> </ul>"},{"location":"platform/architecture/auth/","title":"Authentication and authorization WORK IN PROGRESS","text":""},{"location":"platform/architecture/auth/#role-and-permissions-tables","title":"Role and permissions tables","text":"<p>The following table lists the available roles that can be assigned to registered users of the platform</p> User Description teacher assigned to a registered user who uses the platform as a volunteer teacher school assigned to the user who is the designated point of contact for a school admin assigned to a user with complete administrative control."},{"location":"platform/architecture/auth/#permissions-explained","title":"Permissions explained","text":"<p>Authorized users of the platform invoke the REST api to read and write resources from/to the data store.</p> <p>For non-admin users, not all data records in a single resources (school or teacher) can be accessed/edited with the same permissions.</p> <p>Each resource has both private and public fields/properties</p> <ul> <li>private fields can only be viewed and edited by the owner of the record (i.e. of a teacher's or school's own record) or after express   permission.</li> <li>public fields are available to all users of the system</li> </ul> <p>Teachers can update their own record and see basic details of all other teachers: name, city and materials they teach.</p> <p>A school must have a registered user who acts as the designated contact. They can look for other schools and see basic details, like the name and region.  When they search for a teacher, they can see the same public fields that other teachers can see.</p> <p>Contact details (phone, email, street addresses) are never part of public data. These are only visible to admins and the respective holder of the account.</p> <p>If schools and teachers want to get in touch for the first time, they can do so through the LITTIL platform, which will relay the message through email.</p>"},{"location":"platform/architecture/auth/#read-permissions-for-teacher-resources","title":"Read permissions for teacher resources","text":"permission assigned to roles comment list public teacher data by any search criteria admin a search can be unrestricted search and hence return the complete list of teachers look up any teacher's full data by their id admin a teacher looks up their own complete record teacher look up basic details of a teacher by id school, teacher"},{"location":"platform/architecture/auth/#read-permissions-for-school-resources","title":"Read permissions for school resources","text":"permission assigned to roles comment list public school data by any search criteria school a search can be unrestricted search and hence return the complete list of schools. look up a school's full data by its id admin a school contact looks up their school's full record school a teacher can look up the school that they are connected with full details teacher a teacher can look up any school with basic details teacher"},{"location":"platform/architecture/auth/#write-permissions-for-teacher-resource","title":"Write permissions for teacher resource","text":"permission assigned to roles comment update the teacher record of the logged-in user teacher delete the teacher record of the logged-in user teacher update a teacher record for a random user admin delete a teacher record for a random user admin"},{"location":"platform/architecture/auth/#write-permissions-for-school-resource","title":"Write permissions for school resource","text":"permission assigned to roles comment update a school record by its designated contact person teacher delete a school record by its designated contact person teacher update any school record admin delete any school record admin"},{"location":"platform/architecture/auth/auth0-integration/","title":"Auth0 integration","text":""},{"location":"platform/architecture/auth/auth0-integration/#integration","title":"Integration","text":"<p>LiTTiL currently uses Auth0 as a Single Sign On solution. Auth0 can take a lot of work off our hands when you use all the utilities Auth0 has to offer. For example completely host the registration and login procedure within Auth0 itself. This makes it very easy and fast to implement, it has it's benefits. But for LiTTiL we would like a LiTTiL more control over the login and registration flows, and thus loose coupling with Auth0. We can add more custom check when registration but also move to another SSO provider without needing to rewrite the whole registration / login flows.</p>"},{"location":"platform/architecture/auth/auth0-integration/#user-entity-within-littil","title":"User entity within LiTTiL","text":""},{"location":"platform/architecture/auth/auth0-integration/#registration-flow","title":"Registration flow","text":"<p>Below you can find the sequence diagram of the registration flow. When registering either a school or teacher entity is created. This entity is added to the user object which is created and stored in Auth0. For both account types the <code>RegistrationResouce</code> should have an endpoint. For example: <code>/api/v1/registrate/(school|teacher)</code>. At this moment the user is unable to change the type of an account.</p> <p></p>"},{"location":"platform/architecture/auth/auth0-integration/#create-account-option-disabled","title":"Create account option disabled","text":"<p>A user is created by the backend of the LITTIL platform. The option to prevent users creating an account directly in auth0 is disabled. The option <code>Disable Sign Ups</code> is activated in the menu <code>Authentication - Database</code>.</p>"},{"location":"platform/architecture/auth/auth0-integration/#clients","title":"Clients","text":"<p>We have multiple clients registered in Auth0 for different reasons. Each of them described below with their important config.</p>"},{"location":"platform/architecture/auth/auth0-integration/#littil","title":"littil","text":"<p>A <code>single page application</code> client, which is used by the littil-frontend. Users will be forced to login when using the frontend using this client.</p> <p>Important configs for this client are:</p> <ul> <li>Allowed callback urls<ul> <li>dev: <code>http://localhost:4200, http://localhost:4200/*</code></li> <li>staging: <code>https://staging.littil.org, https://staging.littil.org/*, https://api.staging.littil.org, https://api.staging.littil.org/*</code></li> </ul> </li> <li>Allowed logout urls<ul> <li>dev: <code>http://localhost:4200, http://localhost:4200/*</code></li> <li>staging: <code>https://staging.littil.org, https://staging.littil.org/*, https://api.staging.littil.org, https://api.staging.littil.org/*</code></li> </ul> </li> <li>Allowed web origins<ul> <li>dev: <code>http://localhost</code></li> <li>staging: <code>https://staging.littil.org, https://api.staging.littil.org</code></li> </ul> </li> <li>Grant types should be<ul> <li>Implicit</li> <li>Authorization code</li> <li>Refresh token</li> </ul> </li> <li>Connections<ul> <li>Username-Password-Authentication</li> </ul> </li> </ul> <p>All other settings are default.</p>"},{"location":"platform/architecture/auth/auth0-integration/#littil-backend","title":"LiTTiL backend","text":"<p>A <code>Machine to machine</code> client, used by the littil-backend. The littil-backend uses this client to manage the users, roles and user-metadata in Auth0.</p> <p>Important configs for this client are:</p> <ul> <li>Grant types should be<ul> <li>Client credentials</li> <li>Refresh token</li> </ul> </li> <li>APIs<ul> <li>Auth0 Management API should be enabled, with the following permissions:<ul> <li>read:users</li> <li>update:users</li> <li>create:users</li> <li>delete:users</li> <li>read:users_app_metadata</li> <li>update:users_app_metadata</li> <li>create:users_app_metadata</li> <li>delete:users_app_metadata</li> <li>read:roles</li> <li>update:roles</li> <li>create:roles</li> <li>delete:roles</li> </ul> </li> </ul> </li> </ul> <p>All other settings are default.</p>"},{"location":"platform/architecture/auth/auth0-integration/#littil-backend-openapi","title":"LiTTiL backend OpenAPI","text":"<p>A <code>single page application</code> client, which is used by the littil-backend. Developers will use this client when testing their APIs using the swagger client. Currently, this client will only be available in development environment.</p> <p>Important configs for this client are:</p> <ul> <li>Allowed callback urls<ul> <li>dev: <code>http://localhost:8080/*, http://localhost:8080/q/swagger-ui/, http://localhost:8080/q/swagger-ui/oauth2-redirect.html, http://localhost:8080/q/swagger-ui/*</code></li> </ul> </li> <li>Allowed logout urls<ul> <li>dev: <code>http://localhost:8080, http://localhost:8080/q/swagger-ui/</code></li> </ul> </li> <li>Grant types should be<ul> <li>Implicit</li> <li>Authorization code</li> <li>Refresh token</li> </ul> </li> <li>Connections<ul> <li>Username-Password-Authentication</li> </ul> </li> </ul> <p>All other settings are default.</p>"},{"location":"platform/architecture/auth/auth0-integration/#custom-token-claims","title":"Custom token claims","text":"<p>To provide our tokens with useful information of the authorizations of the user. From within the littil-backend we feed the metadata of the user with this information. Using an <code>custom-action</code> on the login-flow we convert the metadata to custom-claims.</p> <p>The custom-action can be found below <code>Actions &gt; library &gt; Custom actions</code></p> <p>We use the following code:</p> <pre><code>exports.onExecutePostLogin = async (event, api) =&gt; {\n  const namespace = '';\n  const { littil_user_id, authorizations } = event.user.app_metadata;\n\n  if(event.authorization) {\n    api.accessToken.setCustomClaim(`${namespace}littil_user_id`, littil_user_id);\n    api.accessToken.setCustomClaim(`${namespace}authorizations`, authorizations);\n  }\n};\n</code></pre> <p>After creating the custom-action, make sure to drag the custom-action into the login flow.</p>"},{"location":"platform/architecture/auth/auth0-integration/#auth0-roles","title":"Auth0 roles","text":"<p>By default, the roles in auth0 are not forwarded with the ID and accessToken.  A <code>custom-action</code> with the name <code>Add Roles</code> is added to the login-flow to add the roles.</p> <p>The custom-action can be found below <code>Actions &gt; library &gt; Custom actions</code></p> <p>We use the following code:</p> <pre><code>exports.onExecutePostLogin = async (event, api) =&gt; {\n  const namespace = 'https://littil.org';\n  if (event.authorization) {\n    api.idToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n    api.accessToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n  }\n};\n</code></pre> <p>After creating the custom-action, make sure to drag the custom-action into the login flow.</p>"},{"location":"platform/features/","title":"Feature specifications","text":"<p>All functional specification of the platform is expressed in Gherkin feature files, which form the input to the end-to-end tests in the littil-e2e project.</p> <p>The Gherkin source files in this littil-e2e project are automatically included in the following sub-sections:</p> <ul> <li>Registration of a new teacher and management of their account</li> </ul>"},{"location":"platform/features/#registration-flow-as-a-new-user","title":"Registration flow as a new user","text":""},{"location":"platform/features/match-making/","title":"Matching teacher to schools","text":""},{"location":"platform/features/match-making/#additional-address-properties","title":"Additional address properties","text":"<p>For our match making we need the <code>longitude</code> and <code>latitude</code> coordinates which correspond with the location of either the school or teacher. These coordinates needs to be fetched when the user has registered but also when the location of the specific user changes. Google has an API available to find the coordinates based on addresses. The flow below  described how we asynchronously fetch these coordinates using this API.</p> <p></p>"},{"location":"platform/features/school/","title":"School","text":"Registration<pre><code>Feature: Management of the school profile\n  This feature contains registration, updating and deletion of a school account.\n</code></pre> Retrieval<pre><code>Feature: Retrieval of teacher entities by id or search criteria\n  This scenarios in this feature express the detailed security restrictions around retrieval\n\n  Background:\n    Given a user with email &lt;name&gt; is known to the platform\n      | name                      |  |  |\n      | iris.de.bruin@outlook.com |  |  |\n      | jan@zwart@gmail.com       |  |  |\n\n  Scenario: list public school data by any search criteria\n\n  Scenario: look up a school's full data by its id\n\n  Scenario: a school contact looks up their school's full record | school\n\n  Scenario: a teacher can look up the school that they are connected with full details\n\n  Scenario: a teacher can look up any school with basic details\n</code></pre> Update and delete<pre><code>Feature: Management of a teacher record\n\n  This feature contains registration, updating and deletion of a school account.\n\n  Scenario: update a school record by its designated contact person\n\n  Scenario: delete a school record by its designated contact person\n\n  Scenario: update any school record\n\n  Scenario: delete any school record\n</code></pre>"},{"location":"platform/features/teacher/","title":"Teacher","text":"Registration<pre><code>Feature: Management of the teacher profile\n  This feature contains registration, updating and deletion of a user account for teachers, including all profile data\n\n  Scenario: A new user registers on the platform with only mandatory data\n    Given user Iris is new to the platform\n    When Iris indicates she wants to register as a teacher\n    Then she is presented with a registration form\n    When she gives her first name as Iris\n    And her surname as de Bruin\n    And her email as iris.de.bruin@outlook.com\n    And her password as superSecret\n    And her country as the Netherlands\n    And indicates that she agrees with the privacy statement\n    And she confirms the registration\n    Then she receives an email at iris.de.bruin@outlook.com asking to activate her account\n    When she follows the activation instructions in the email\n    Then her account is activated\n    And she can log in with email iris.de.bruin@outlook.com and password superSecret\n\n  Scenario: A new user registers on the platform, completing her full profile\n    Given user Jeffrey is new to the platform\n    When Jeffrey indicates he wants to register as a teacher\n    Then he is presented with a registration form\n    When he gives his first name as Jeffrey\n    And his surname as Wang\n    And his email as jeffrey.wang@outlook.com\n    And his password as superSecret\n    And his post code as 3081\n    And his country as the Netherlands\n    And his available days as Monday,Wednesday,Friday\n    And his profile text as Liefst alleen groep acht.\n    And indicates that he agrees with the privacy statement\n    And he confirms the registration\n    Then he receives an email at jeffrey.wang@outlook.com asking to activate his account\n    When he follows the activation instructions in the email\n    Then his account is activated\n</code></pre> Retrieval<pre><code>Feature: Retrieval of teacher entities by id or search criteria\n  This scenarios in this feature express the detailed security restrictions around retrieval\n\n  Background:\n    Given a user with email &lt;name&gt; is known to the platform\n      | name                      |  |  |\n      | iris.de.bruin@outlook.com |  |  |\n      | jan@zwart@gmail.com       |  |  |\n\n\n  Scenario: list public teacher data by any search criteria\n\n  Scenario: look up any teacher's full data by their id\n\n  Scenario: a teacher looks up their own complete record\n\n  Scenario: look up basic details of a teacher by id\n\n  Scenario: list public school data by any search criteria\n\n  Scenario: look up a school's full data by its id\n\n  Scenario: a school contact looks up their school's full record\n\n  Scenario: a teacher can look up the school that they are connected with full details\n\n  Scenario: a teacher can look up any school with basic details\n</code></pre> Update and delete<pre><code>Feature: Management of the teacher profile\n  This feature contains registration, updating and deletion of a user account for teachers, including all profile data\n\n  Background:\n    Given a user with email iris.de.bruin@outlook.com is known to the platform\n\n  Scenario: update the teacher record of the logged-in user\n    When Iris logs into the system\n    And indicates she wants to change her profile\n    Then she can update her first name to Irina and surname to de Zwart\n    And her password to Bienvenu123\n    And her post code to 5511\n    And her profile text to Liefst alleen groep drie en vier\n    And her available days as Tuesday,Thursday\n    Then her account details are updated\n\n  Scenario: update the email of the logged-in user\n    When Iris logs into the system\n    And indicates she wants to change her email\n    Then she can update her email to iris.de.bruin@gmail.com\n    And she receives an email at iris.de.bruin@gmail.com confirming the change\n\n  Scenario: Resetting the password by the logged-in user\n    When Iris indicates she has forgotten her password\n    Then she can enter her email as iris.de.bruin@gmail.com\n    And she receives an email at iris.de.bruin@gmail.com with a link to a password page\n    When she follows the link to the password reset page\n    Then she can enter a new password as updatedPwd\n    And she can log in with email iris.de.bruin@outlook.com and password updatedPwd\n\n  Scenario: delete the teacher record of the logged-in user\n    When Iris logs into the system\n    And indicates that she wants to delete her account\n    And confirms her decision to delete\n    Then she receives email confirmation that the account has been deleted\n    And she can no longer log in\n\n  Scenario: update a teacher record for a random user\n\n  Scenario: delete a teacher record for a random user\n</code></pre>"},{"location":"platform/infrastructure/","title":"AWS","text":"<p>The LITTIL platform allows deployment into the AWS public cloud platform.</p> <p>For setup of AWS and cloudformation templates, visit the infrastructure repository</p> <p>For the infrastructure definitions for each application, visit the front-end and back-end repositories.</p>"},{"location":"platform/infrastructure/#cloud-architecture","title":"Cloud architecture","text":"<p>Note: Diagram contains draw.io source (load diagram from this PNG image)</p> <p>Note: This picture shows the infrastructure as designed (intended). Actual infrastructure may deviate (see TODO note)</p> <p>TODO: Since the back and front-end are separate applications, deployed separately, this diagram should be split and put with the respective infra code it describes.</p> <p>AWS Feedback 2022-09-13: - Use Amplify for front-end. Hosting &amp; Build in AWS in a cost-effective way   - Pay per build-minute &amp; gigabyte storage &amp; gigabyte traffic   - Free tier eligible - ECR (Elastic Container Registry) for image storage   - Pay for storage, use expiry date on images to save on storage   - Use ECR vulnerability scanning (setting in ECR, functionality from Security Hub) - Load balancer for back-end ingress   - Only way to get traffic dynamically routed. Elastic IP is free of charge, but requires manual DNS updates to internal container IP - ECS (Elastic Container Service) for back-end runtime   - ARM or x86, ARM is cheaper (native compilation with Quarkus?)   - Fargate - Networking   - Private subnet, VPC with 2 AZ (Availability Zones)   - NAT Gateway for egress (to retrieve images from ECR) - CDK   - Use aws_ecs_patterns in TypeScript CDK, network details will be abstracted away - RDS (Relational Database Service) for persistence   - EC2 instance T4G-micro, 2vCPU, 1GB, good for ~89 DB connections</p> <p>Decisions on start of implementation front-end infra 2022-09-24 - Use Cloudfront &amp; S3 for front-end. Amplify would use those anyway, and could be useful. But for now it adds unnecessary complexity.</p>"},{"location":"platform/infrastructure/#cost-saving-version","title":"Cost saving version","text":"<p>Since July 2024, costs have been reduced by using a version of the infra architecture that uses an EC2 machine instead of a ECS task. It requires manual deployments, but cuts cost by ~60%.</p> <p></p> <p>More specific information will be available in the LITTIL-backend repository, which is where the infra design is implemented.</p>"},{"location":"platform/infrastructure/#infra-as-code-iac","title":"Infra as code (IaC)","text":"<p>To make sure infrastructure deployments are reliably reproducible across time and environments, LITTIL defines infrastructure as code. Within the AWS ecosystem that is currently used this effectively means Cloudformation templates (in YAML or JSON) for the foundation, and CDK apps for applications (after the CDK has been bootstrapped in the foundation).</p> <p>To add infrastructure components, they should be added to a new or existing CDK app or Cloudformation template. When creating resources, determine their appropriate place using the following questions:</p> <p>Q: Is this infrastructure component part of a specific application (e.g. the back-end service or front-end)</p> <p>If so, place the component in the CDK app belonging to that application. If this is a new application, create an <code>infrastructure</code> folder in this new application's Git repository.</p> <p>Q: Is this a component that should be rolled out over all environments (staging &amp; production)? Is it for a specific environment? Does it make sense to consider it in the context of an environment?</p> <p>For example, a database is probably going to be accessed by only one application (the data's owner). So a database can be created in the context of an application (in the CDK app of that application).</p> <p>On the other side, a domain name is an example of a component that spans environments (supports both staging.littil.org and littil.org), and even has uses or properties that do not correspond to any environment (such as email DNS records). So a domain (as an infrastructure component) should be place in the central infrastructure repository.</p> <p>Q: Should it be considered an \"application\" component, or a \"foundation\" component?</p> <p>Some components might not be as wide in scope as a domain name, but they might also not correspond to an environment. For example resources related to aggregating logs from all systems (in all AWS accounts, including but not limited to the environments). Code for these infra resources should be in the infrastructure repository.</p>"},{"location":"platform/infrastructure/#infrastructure-code","title":"Infrastructure code","text":"<p>LITTIL infrastructure is currently made up out of three pieces: - A cloud foundation: located in the littil-infrastructure repository - Back-end infrastructure: located in the infrastructure folder in the littil-backend repository - Front-end infrastructure: located in the infrastructure folder in the littil-frontend repository</p> <p>The cloud foundation consists of procedures and code for bootstrapping AWS CDK and setting up a link with Github pipelines. With this foundation in place, applications can be deployed, as is done from the application specific repositories.</p>"},{"location":"platform/local-development/","title":"Setting up your local development environment.","text":"<p>Please follow the following guide to setup your local development environments:</p> <ul> <li>Front-end environment</li> <li>Back-end environment</li> </ul>"},{"location":"platform/local-development/set-up-backend-environment/","title":"Setting up your local develop environment","text":"<p>When you want to contribute to the LITTIL API you need some tools in order to run the API locally.  The API is written in JAVA, based on Quarkus. For data persistence we use a Mysql database. </p> <p>Don't worry about installing these extra dependencies, when running in <code>dev</code> mode those will be automatically installed  in a docker container for you. </p>"},{"location":"platform/local-development/set-up-backend-environment/#prerequisites","title":"Prerequisites","text":"<p>Before you are able to run the API of LITTIL you need to make sure you have the following software installed on  your machine. - Java 17 - Maven - Docker - Quarkus cli</p>"},{"location":"platform/local-development/set-up-backend-environment/#sdkman","title":"SDKMAN!","text":"<p><code>SDKMAN!</code> is an util which you can use on all unix based systems. This includes all Linux distributions, but also MacOS.  <code>SDKMAN!</code> makes it really easy to not only install Java on your machine but most utilities which are commonly used within  the Java eco-environment. You can use the following guide to install <code>SDKMAN!</code> on your machine:</p> <p>You can install <code>SDKMAN!</code> by running the following command on your machine:</p> <pre><code>$ curl -s \"https://get.sdkman.io\" | bash\n</code></pre> <p>To use <code>SDKMAN!</code> you can either run the command below or restart your terminal. <pre><code>$ source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n</code></pre></p> <p>Run the following code snippet to ensure that installation succeeded: <pre><code>$ sdk version\n</code></pre></p>"},{"location":"platform/local-development/set-up-backend-environment/#java","title":"Java","text":""},{"location":"platform/local-development/set-up-backend-environment/#unix","title":"Unix","text":"<p>To see which versions are available for java run: <pre><code>$ sdk list java \n</code></pre></p> <p>Then install the latest java 17 version, i.e: <pre><code>$ sdk install java 17.0.5-zulu    \n</code></pre> For more information regarding <code>SDKMAN!</code> please visit their website at: https://sdkman.io/</p> <p>if you which to install java directly you can also download it directly from the Oracle website.</p>"},{"location":"platform/local-development/set-up-backend-environment/#windows","title":"Windows","text":"<p>Please contribute</p>"},{"location":"platform/local-development/set-up-backend-environment/#maven","title":"Maven","text":"<p>This projects ships a Maven wrapper. With this wrapper it's not necessary to install maven locally on your machine.  To run maven on unix use <code>$ ./mvnw &lt;parameters&gt;</code> on a Windows machine your can use <code>$ ./mvnw.cmd &lt;parameters&gt;</code>.</p>"},{"location":"platform/local-development/set-up-backend-environment/#quarkus-cli","title":"Quarkus CLI","text":"<p>Quarkus ships an CLI tool for better developing experience. This tool is not mandatory in order to work locally on the  LITTIL API project. But in case you would like to use it you should follow the instructions below:</p>"},{"location":"platform/local-development/set-up-backend-environment/#unix_1","title":"Unix","text":"<p><code>SDKMAN!</code> ships the quarkus cli tool as well. The easiest way to install this tool is by using <code>SDKMAN!</code>. Run the following  command in your terminal to see which versions are available</p> <pre><code>$ sdk list quarkus\n</code></pre> <p>Then install the desired version, in example: <pre><code>$ sdk install quarkus 2.6.3.Final\n</code></pre></p> <p>To verify the installation is successful, run:  <pre><code>$ quarkus --version\n</code></pre></p>"},{"location":"platform/local-development/set-up-backend-environment/#windows_1","title":"Windows","text":"<p>The recommended way to install on Windows is via <code>JBang</code> using the powershell. You can simply run: <pre><code>iex \"&amp; { $(iwr https://ps.jbang.dev) } app install --fresh --force quarkus@quarkusio\"\n</code></pre></p> <p>If you already have <code>JBang</code> installed on your windows machine you can run: <pre><code>jbang app install --fresh --force quarkus@quarkusio\n</code></pre></p> <p>For more information, please read: Quarkus cli-tooling</p>"},{"location":"platform/local-development/set-up-backend-environment/#docker","title":"Docker","text":"<p>Quarkus uses Docker to spin up containers of middleware which the LITTIL API depends on. For example the mysql  database for persisting data. In order to run these containers <code>Docker</code> must be installed on your machine. </p>"},{"location":"platform/local-development/set-up-backend-environment/#macos-windows","title":"MacOS &amp; Windows","text":"<p>The easiest way to install docker on your Windows or MacOS machine is by installing docker-desktop. You can find the installation files on docker download page. </p>"},{"location":"platform/local-development/set-up-backend-environment/#linux","title":"Linux","text":"<p>Please see the following documentation on how to get Docker installed on your preferred Linux distribution:  Official Docker Documentation</p>"},{"location":"platform/local-development/set-up-backend-environment/#run-the-littil-api-locally","title":"Run the LITTIL API locally","text":"<p>Now, with all dependencies installed you can start the API for local development. You use either Maven via:</p> <pre><code>$ ./mvnw quarkus:dev\n</code></pre> <p>Or via the quarkus-cli tool <pre><code>$ ./quarkus dev\n</code></pre></p> <p>If you run into issues regarding the fact the docker daemon can not be found. Please see: Docker daemon not running </p> <p>To verify that the environment is running, open your web-browser en go to the health-check.  If the response includes a <code>status:UP</code> you are good to go!</p>"},{"location":"platform/local-development/set-up-backend-environment/#common-used-commands","title":"Common used commands","text":"<p>The following commands are useful when contributing to the LITTIL API. You should run these within the project directory. - <code>$ ./quakus dev</code> / <code>$ ./mvnw quarkus:dev</code> for starting your development environment. - <code>$ ./quakus build [--native] --[no-]tests</code> / <code>$ ./mvnw quarkus:build [-D[no-]tests] [-Dnative]</code> to build an artifact. the native and (no-)test parameters are optional. - <code>$ ./quarkus test</code> / <code>$ ./mvnw quarkus:test</code> to run all tests</p> <p>For more commands you can run <code>$ ./quarkus --help</code> / <code>$ ./mvnw quarkus:help</code></p>"},{"location":"platform/local-development/set-up-backend-environment/#environment-variables","title":"Environment variables","text":"<p>Some Quarkus configuration is injected via environment variables so that the same application can run on any environment. To make it easy the configuration has a fallback when no environment variables are found. Those configurations are  only applicable for the development (local) environment. Though, some configuration (such as passwords or keys) should not exist within the code.</p> <p>Booting the application without these configuration will result in errors. To make it easy to set up environment variables Quarkus has multiple options. Working with an local <code>.env</code> file is recommended. How to implement this in your local environment is described on the quarkus official documentation site.  You can copy the <code>.env.example</code> file and season it with the correct values to config Auth0</p> <p>Make sure you never commit this <code>.env</code> file to the repository since it contains sensitive information.</p>"},{"location":"platform/local-development/set-up-backend-environment/#known-issues","title":"Known issues","text":""},{"location":"platform/local-development/set-up-backend-environment/#docker-daemon-not-running","title":"Docker daemon not running","text":"<p>If you are developing on a Linux Ubuntu (distro) you might run into issues with Docker for example when running tests.  The tests will fail, and you will see logging about the docker daemon. This is due to the fact docker-daemon requires root permissions.</p> <pre><code>ERROR [org.tes.doc.DockerClientProviderStrategy] (build-4) Could not find a valid Docker environment. Please check configuration. Attempted configurations were:\nERROR [org.tes.doc.DockerClientProviderStrategy] (build-4) UnixSocketClientProviderStrategy: failed with exception TimeoutException (Timeout waiting for result with exception). Root cause LastErrorException ([13] Permission denied)\nERROR [org.tes.doc.DockerClientProviderStrategy] (build-4) As no valid configuration was found, execution cannot continue\n\n---\n\nWARN  [io.qua.dat.dep.dev.DevServicesDatasourceProcessor] (build-29) Please configure the datasource URL for the default datasource or ensure the Docker daemon is up and running.\nRecoverable I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:2375\n</code></pre> <p>If you see this you are probably running Quarkus within your IDE or use the terminal utility of your IDE. </p> <p>To solve this issue you can either: - configure Docker for rootless mode. For more information see: Docker rootless (unfortunately, this does not always solve the issue); - or run Quarkus from your OS terminal.</p>"},{"location":"platform/local-development/set-up-frontend-environment/","title":"Setting up your local develop environment","text":"<p>If you want to contribute to the LITTIL website you need to set up a development environment. The website static environment based on Angular.io.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#prerequisites","title":"Prerequisites","text":"<ul> <li>NodeJS LTS &gt;= 16</li> <li>NPM 8</li> </ul>"},{"location":"platform/local-development/set-up-frontend-environment/#nodejs","title":"Nodejs","text":"<p>Nodejs is used to generate the static files via Angular. The LITTIL website is tested and build on the LTS version of NodeJS 16. When installing NodeJS you will get an installation of NPM as well.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#windows-macos","title":"Windows &amp; MacOS","text":"<p>To install NodeJS on Windows or MacOS you can simply download it from the website.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#linux","title":"Linux","text":"<p>The easiest way to install NodeJS is by using your package manager. For instructions on your distribution see the website as well</p>"},{"location":"platform/local-development/set-up-frontend-environment/#installation","title":"Installation","text":"<p>To run the Frontend locally, follow these steps:</p> <ol> <li>Download the repository from [Github|https://github.com/Devoxx4Kids-NPO/littil-frontend]</li> <li>Open the repository folder in your IDE ([VSCode download page|https://code.visualstudio.com/download])</li> <li>Open a terminal and run:</li> </ol> <pre><code>$ npm install\n</code></pre> <ol> <li>To get the OpenAPI specs locally, run:</li> </ol> <pre><code>$ npm run openapi\n</code></pre> <ol> <li>Now you are ready to start the application, run:</li> </ol> <pre><code>$ npm start\n</code></pre> <ol> <li>Read the <code>README.md</code> file for more information about the Frontend repository.</li> </ol>"},{"location":"platform/local-development/set-up-frontend-environment/#docker","title":"Docker","text":"<p>The LITTIL website is a static site that can run on any HTTP webserver. In example, you can use Nginx to serve the static files. If you want an image based on this project running in Nginx you can use the following guide:</p>"},{"location":"platform/local-development/set-up-frontend-environment/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Docker</li> </ul>"},{"location":"platform/local-development/set-up-frontend-environment/#installation-of-docker","title":"Installation of Docker","text":""},{"location":"platform/local-development/set-up-frontend-environment/#macos-windows","title":"MacOS &amp; Windows","text":"<p>The easiest way to install docker on your Windows or MacOS machine is by installing docker-desktop. You can find the installation files on docker download page.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#linux_1","title":"Linux","text":"<p>Please see the following documentation on how to get Docker installed on your preferred Linux distribution: Official Docker Documentation locally on your machine.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#building-an-image","title":"Building an image","text":"<p>This projects ships 2 docker files. The file <code>./src/docker/Dockerfile.build</code> can be used to build the project within a container. This is ideal when you don't have NodeJS installed local on your device.</p> <p>You can use <code>./src/docker/Dockerfile.host</code> if you already have build the project local on your device, and you want to create an image with this build.</p> <p>Use the following command in the root of the project to start building an image and tag it. Feel free to choose a tag of your own.</p> <pre><code>$ docker build . -f src/docker/Dockerfile.(build|host) -t littil/littil-org-website:latest\n</code></pre> <p>After a successful build you can start running the image using Docker via:</p> <pre><code>$ docker run -it -p 8081:80 littil/littil-org-website:latest\n</code></pre> <p>Parameters</p> <ul> <li>You can either use <code>-d</code> instead of <code>-it</code> if you want to start the container in <code>detached mode</code>.</li> <li>The container exposes port 80 by default. If your machine is already using this port you can map the   container port to another local port on your device using <code>-p</code>. In the example above the mapping is from port 80 to port 8081.</li> </ul> <p>You can now navigate to <code>http://localhost:8081</code> using your browser. You should see the LITTIL website.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#get-the-id-of-a-container","title":"Get the ID of a container","text":"<p>To start, stop or access your container you need its ID. You can find this ID by running:</p> <pre><code>$ docker ps\n</code></pre> <p>The correct ID is in column <code>CONTAINER ID</code>.</p>"},{"location":"platform/local-development/set-up-frontend-environment/#access-the-container","title":"Access the container","text":"<p>If you need access to the Nginx webserver you can simply gain access with <code>Bash</code> using the <code>CONTAINER ID</code> which you can look up as described above.</p> <pre><code>$ docker exec -it &lt;CONTAINER ID&gt; /bin/bash\n</code></pre>"},{"location":"platform/local-development/set-up-frontend-environment/#stopping-the-container","title":"Stopping the container","text":"<p>When you have started your container in <code>detached mode</code> and you want to stop it, you need to do this with the Docker CLI tool. First look up the <code>CONTAINER ID</code> and then run:</p> <pre><code>$ docker stop &lt;CONTAINER ID&gt;\n</code></pre>"},{"location":"platform/local-development/set-up-frontend-environment/#remove-the-container","title":"Remove the container","text":"<p>If you want to remove the container from your machine you should look up the <code>CONTAINER ID</code> and then run:</p> <pre><code>$ docker rm &lt;CONTAINER ID&gt;\n</code></pre>"},{"location":"teaching_materials/","title":"Teaching materials","text":""}]}